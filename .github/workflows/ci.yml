name: CI/CD

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

  push:
    branches: [main, develop]
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-*"

permissions:
  contents: read

env:
  AWS_REGION: us-east-1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          distribution: "temurin"
          java-version: "17"
          cache: "gradle"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
        with:
          gradle-version: "8.10"

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false

      - name: Install Python dependencies
        run: uv pip install --system nbformat

      - name: Run tests with coverage
        run: ./gradlew test jacocoTestReport

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: build/test-results/test/
          retention-days: 30

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: build/reports/jacoco/test/html/
          retention-days: 30

  build-scan:
    name: Build and Scan (Security Gate)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        run: |
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "COMMIT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build Docker image (local)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: sharing-service:scan-${{ steps.meta.outputs.COMMIT_SHA }}
          labels: |
            org.opencontainers.image.created=${{ steps.meta.outputs.BUILD_DATE }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: sharing-service:scan-${{ steps.meta.outputs.COMMIT_SHA }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate SBOM
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: sharing-service:scan-${{ steps.meta.outputs.COMMIT_SHA }}
          format: 'cyclonedx'
          output: 'sbom.json'

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ steps.meta.outputs.COMMIT_SHA }}
          path: sbom.json
          retention-days: 30

      - name: Security scan passed
        run: |
          echo "‚úÖ Security scan passed - no CRITICAL/HIGH vulnerabilities found"
          echo "üìã SBOM generated and uploaded as artifact"
          echo "üîí Image is ready for release tagging"

  build-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      id-token: write
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        run: |
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "COMMIT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.CI_BUILD_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image (local for scanning)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: sharing-service:release-${{ steps.version.outputs.VERSION }}
          labels: |
            org.opencontainers.image.created=${{ steps.meta.outputs.BUILD_DATE }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: sharing-service:release-${{ steps.version.outputs.VERSION }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "1"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Push to ECR with attestations
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          provenance: mode=max
          sbom: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPO_DEV }}:${{ steps.version.outputs.VERSION }}
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPO_DEV }}:latest
          labels: |
            org.opencontainers.image.created=${{ steps.meta.outputs.BUILD_DATE }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
          cache-from: type=gha

      - name: Output image details
        if: success()
        run: |
          echo "‚úÖ Image pushed: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPO_DEV }}:${{ steps.version.outputs.VERSION }}"
          echo "üì¶ Image digest: ${{ steps.push.outputs.digest }}"
          echo "üîñ Latest tag updated: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPO_DEV }}:latest"
          echo "üîí SBOM and provenance attestations attached"
          echo "üõ°Ô∏è Trivy scan passed (no CRITICAL/HIGH vulnerabilities)"
          echo "üìã Security scan completed before push - no vulnerable images in ECR"
